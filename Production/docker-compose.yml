version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend

  DatabaseService:
    container_name: DatabaseService
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      SA_PASSWORD: Abc123!!@
      ACCEPT_EULA: Y
    volumes:
      - mssqldata:/var/opt/mssql
      - ./DatabaseService/script:/docker-entrypoint-initdb.d
    ports:
      - '1433:1433'
    restart: unless-stopped
    networks:
      - backend

  MongoService:
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    networks:
      - backend

  LogsConsumer:
    build:
      context: ./LogService/api
      dockerfile: Dockerfile
    image: log_service_api:1
    environment:
      - BROKER_SERVER_ADDRESS=broker:29092
    ports:
      - "3000:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  AddressServiceAPI:
    build:
      context: ./AddressService/api
      dockerfile: Dockerfile
    image: address_service_api:1
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - BROKER_SERVER_ADDRESS=broker:29092
      - CLIENT_ID=address_producer
      - TOPIC=address_topic
    ports:
      - "5000:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  ContactInformationServiceAPI:
    build:
      context: ./ContactInformationService/api
      dockerfile: Dockerfile
    image: contact_information_service_api:1
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - BROKER_SERVER_ADDRESS=broker:29092
      - CLIENT_ID=contact_producer
      - TOPIC=contact_topic
    ports:
      - "5001:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  CustomerServiceAPI:
    build:
      context: ./CustomerService/api
      dockerfile: Dockerfile
    image: customer_service_api:1
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - BROKER_SERVER_ADDRESS=broker:29092
      - CLIENT_ID=customer_producer
      - TOPIC=customer_topic
    ports:
      - "5002:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  ItemServiceAPI:
    build:
      context: ./ItemService/api
      dockerfile: Dockerfile
    image: item_service_api:1
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - BROKER_SERVER_ADDRESS=broker:29092
      - CLIENT_ID=item_producer
      - TOPIC=item_topic
    ports:
      - "5003:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  OrderItemServiceAPI:
    build:
      context: ./OrderItemService/api
      dockerfile: Dockerfile
    image: order_item_service_api:1
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - BROKER_SERVER_ADDRESS=broker:29092
      - CLIENT_ID=order_item_producer
      - TOPIC=order_item_topic
    ports:
      - "5004:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  OrderServiceAPI:
    build:
      context: ./OrderService/api
      dockerfile: Dockerfile
    image: order_service_api:1
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - BROKER_SERVER_ADDRESS=broker:29092
      - CLIENT_ID=order_producer
      - TOPIC=order_topic
    ports:
      - "5005:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  UserServiceAPI:
    build:
      context: ./UserService/api
      dockerfile: Dockerfile
    image: user_service_api:1
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - BROKER_SERVER_ADDRESS=broker:29092
      - CLIENT_ID=user_producer
      - TOPIC=user_topic
    ports:
      - "5006:5000"
    restart: always
    depends_on:
      - DatabaseService
    networks:
      - backend

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "8000:80"
    depends_on:
      - AddressServiceAPI
      - ContactInformationServiceAPI
      - CustomerServiceAPI
      - ItemServiceAPI
      - OrderItemServiceAPI
      - OrderServiceAPI
      - UserServiceAPI
    networks:
      - backend

  EurekaRegistry:
      container_name: EurekaRegistry
      image: steeltoeoss/eureka-server:latest
      restart: always
      hostname: EurekaRegistry
      ports:
        - 8761:8761
      networks:
        - backend

volumes:
  mssqldata:
  mongodb_data:

networks:
  backend:
    name: backend
